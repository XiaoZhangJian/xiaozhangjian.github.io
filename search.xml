<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Android Studio 遇见的问题总汇]]></title>
      <url>http://www.kimsblog.me/2017/07/21/2017-07-21-android-%E4%BD%BF%E7%94%A8Android%20Studio%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>主要记录一些，自己在使用Android 遇见的问题记录下解决方法（记忆力不太好）</p>
<a id="more"></a>
<h4 id="Android-Studio-打包JAR-的时候在build-intermediates-bundles-未生成release目录"><a href="#Android-Studio-打包JAR-的时候在build-intermediates-bundles-未生成release目录" class="headerlink" title="Android Studio 打包JAR 的时候在build/intermediates/bundles/未生成release目录"></a>Android Studio 打包JAR 的时候在<code>build/intermediates/bundles/</code>未生成release目录</h4><p>一言不合我就甩图：</p>
<p><img src="../images/problem/releasenot.png" alt="release不存在的图片"></p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">   </div><div class="line">    publishNonDefault true  // 添加上这句话重新Build就可以了</div><div class="line"></div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于获取android6.0的mac地址]]></title>
      <url>http://www.kimsblog.me/2017/04/22/2017-04-22-android-%E8%8E%B7%E5%8F%96mac%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<p> 最近接触6.0,发现使用单纯的<code>wifiManager.getConnectionInfo().getMacAddress();</code>方法获取不到MAc地址。后来Google一下发现 Google对硬件信息的访问，其管控更加严格。SD 卡的读写，除了权限声明之外，还应该动态请求，否则就会被禁止。至于 MAC 网络地址的获取，相应的 API 返回的最新结果都是 <code>02:00:00:00:00:00</code> 这个固定值。可以参见 <a href="http://stackoverflow.com/questions/33159224/getting-mac-address-in-android-6-0" target="_blank" rel="external">Getting MAC address in Android 6.0</a>。<br> 按照官方解释，这是为了<code>更好的数据保护</code>，可以参见<a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-hardware-id" target="_blank" rel="external"> Android 6.0 变化</a>一文中 <code>Access to Hardware Identifier</code> 一节。</p>
<a id="more"></a>
<h2 id="获取-MAC-的传统方法："><a href="#获取-MAC-的传统方法：" class="headerlink" title="获取 MAC 的传统方法："></a>获取 MAC 的传统方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">final WifiManager wifiManager = (WifiManager) getApplication()</div><div class="line">				.getApplicationContext().getSystemService(Context.WIFI_SERVICE);</div><div class="line">final String wifiMACaddress = wifiManager.getConnectionInfo()</div><div class="line">				.getMacAddress();</div></pre></td></tr></table></figure>
<p>然而这种方法在<code>6.0</code>上并不好使,那怎么办呢?</p>
<p><img src="http://img.blog.csdn.net/20160512135937593" alt="这里写图片描述"></p>
<p>查询资料找到了相应的解决方法:<br>  使用Java获取设备网络设备信息的API——NetworkInterface.getNetworkInterfaces() ——仍然可以间接地获取到MAC地址。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 有兴趣的朋友可以看下NetworkInterface在Android FrameWork中怎么实现的</div><div class="line">	public static String macAddress() throws SocketException &#123;</div><div class="line">	        String address = null;</div><div class="line">	        // 把当前机器上的访问网络接口的存入 Enumeration集合中</div><div class="line">	        Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();</div><div class="line">	        while (interfaces.hasMoreElements()) &#123;</div><div class="line">	            NetworkInterface netWork = interfaces.nextElement();</div><div class="line">	            // 如果存在硬件地址并可以使用给定的当前权限访问，则返回该硬件地址（通常是 MAC）。 </div><div class="line">	            byte[] by = netWork.getHardwareAddress();</div><div class="line">	            if (by == null || by.length == 0) &#123;</div><div class="line">	                continue;</div><div class="line">	            &#125;</div><div class="line">	            StringBuilder builder = new StringBuilder();</div><div class="line">	            for (byte b : by) &#123;</div><div class="line">	                builder.append(String.format(&quot;%02X:&quot;, b));</div><div class="line">	            &#125;</div><div class="line">	            if (builder.length() &gt; 0) &#123;</div><div class="line">	            	builder.deleteCharAt(builder.length() - 1);</div><div class="line">	            &#125;</div><div class="line">	            String mac = builder.toString();</div><div class="line">	            Log.d(&quot;mac&quot;, &quot;interfaceName=&quot;+netWork.getName()+&quot;, mac=&quot;+mac);</div><div class="line">	            // 从路由器上在线设备的MAC地址列表，可以印证设备Wifi的 name 是 wlan0</div><div class="line">	            if (netWork.getName().equals(&quot;wlan0&quot;)) &#123;</div><div class="line">	                Log.d(&quot;mac&quot;, &quot; interfaceName =&quot;+netWork.getName()+&quot;, mac=&quot;+mac);</div><div class="line">	                address = mac;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        return address;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p><strong>运行的结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=wlan0, mac=8C:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=wlan0, mac=8C:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=p2p0, mac=8E:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=dummy0, mac=42:35:AD:88:CE:D2</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=usbnet0, mac=52:D9:15:FA:64:1A</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=rmnet0, mac=C6:76:E0:64:56:AC</div></pre></td></tr></table></figure>
<p></p>
<p>这样就可以正常的获取到6.0的mac地址了!希望能帮助大家</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 快速搭建个人博客]]></title>
      <url>http://www.kimsblog.me/2017/04/21/2017-04-21-hexo-hello%20world/</url>
      <content type="html"><![CDATA[<meta name="description" content="Hexo + GitHub 快速搭建自己的博客">

<p>刚开始接触Hexo时候遇见各种坑，各种找资料，终于解决了！第一次写博客，因为搭建这个博客网站就是为了记录下自己学习过的东西，生怕忘了就尴尬了！可能写的不太好，我会努力的！<br>我的博客地址：<a href="http://www.kimsblog.me">kim’s blog</a> 有兴趣的朋友可以看下</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Github-账号"><a href="#Github-账号" class="headerlink" title="Github 账号"></a>Github 账号</h3><h4 id="Github是什么-各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github-是什么是可耻的！"><a href="#Github是什么-各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github-是什么是可耻的！" class="headerlink" title="Github是什么?各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github 是什么是可耻的！"></a>Github是什么?各位<code>老司机</code>不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github 是什么是可耻的！</h4><h4 id="创建项目存放博客"><a href="#创建项目存放博客" class="headerlink" title="创建项目存放博客"></a>创建项目存放博客</h4><ul>
<li>登录Github账号，进入主页面，看右上角<img src="/images/github/github new project1.png" alt="Github new project1"></li>
<li>仓库名格式: <code>username.github.io</code> username 代表你的github用户名保持一致，最后点击 <input type="button" value="Create repository "> 按钮<br><br>  <img src="/images/github/github new project2.png" alt="Github new project2"></li>
<li>进入这个页面创建成功！<br><br>  <img src="/images/github/github new project3.png" alt="Github new project3"></li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git-官网下载"><a href="#使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git-官网下载" class="headerlink" title="使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git 官网下载"></a>使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去<a href="https://git-scm.com/download" target="_blank" rel="external"><code>Git 官网</code></a>下载</h4><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="Git-官网下载安装包"><a href="#Git-官网下载安装包" class="headerlink" title="Git 官网下载安装包"></a><a href="https://git-scm.com/download" target="_blank" rel="external">Git 官网</a>下载安装包<img src="/images/git/git page download.png" alt="git download page"></h5><h5 id="下载好，双击打开"><a href="#下载好，双击打开" class="headerlink" title="下载好，双击打开"></a>下载好，双击打开</h5><h5 id="检查SSH-Key，查看是否已经存在key，请把已有key备份"><a href="#检查SSH-Key，查看是否已经存在key，请把已有key备份" class="headerlink" title="检查SSH Key，查看是否已经存在key，请把已有key备份"></a>检查SSH Key，查看是否已经存在key，请把已有key备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh</div><div class="line">$ ls</div></pre></td></tr></table></figure>
<h5 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</div></pre></td></tr></table></figure>
<h5 id="把SSH-Key-添加到Github"><a href="#把SSH-Key-添加到Github" class="headerlink" title="把SSH Key 添加到Github"></a>把SSH Key 添加到Github</h5><ul>
<li>登录github账号,点击头像旁小三角, 选择 Settings<img src="/images/github/github settings1.png" alt="Github setting"></li>
<li>进入设置页面，左侧选择 <code>SSH and GPG keys</code> 会看到这个 <img src="/images/github/github new ssh key1.png" alt="Github new ssh key page"><br> 点击 <code>New SSH Key</code>出现 <img src="/images/github/github new ssh key2.png" alt="Github new ssh key page2"> title 随意填写，key 输入 <code>id_rsa.pub</code>文件中内容,然后保存</li>
</ul>
<h5 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh git@github.com</div></pre></td></tr></table></figure>
<h5 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h5><p><code>$ git config --global user.name &quot;xxx&quot;</code><br><code>$ git config --glbal user.email &quot;xxxx@xxx.com&quot;</code></p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="使用node-主要用来生成静态页面，Node-官网"><a href="#使用node-主要用来生成静态页面，Node-官网" class="headerlink" title="使用node 主要用来生成静态页面，Node 官网"></a>使用node 主要用来生成静态页面，<a href="https://nodejs.org/en/" target="_blank" rel="external"><code>Node 官网</code></a></h4><h4 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="Node-官网下载安装包"><a href="#Node-官网下载安装包" class="headerlink" title="Node 官网下载安装包"></a><a href="https://nodejs.org/en/" target="_blank" rel="external">Node 官网</a>下载安装包<img src="/images/node/node page download.png" alt=""></h5><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><img src="/images/node/node install.png" alt="node install"><br> 安装 Pkg 文件，一路 Next 就完成安装！</p>
<h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><h5 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h5><p> <code>$ node -v</code><br>显示版本证明安装成功！<br><img src="/images/node/node check.png" alt="node check"> </p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="环境配置-2"><a href="#环境配置-2" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="确定Git-和-Node-都安装好，才能安装-hexo"><a href="#确定Git-和-Node-都安装好，才能安装-hexo" class="headerlink" title="确定Git 和 Node 都安装好，才能安装 hexo"></a>确定Git 和 Node 都安装好，才能安装 hexo</h5><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><p><code>$ npm install hexo-cli -g</code></p>
<h5 id="查看hexo命令："><a href="#查看hexo命令：" class="headerlink" title="查看hexo命令："></a>查看hexo命令：</h5><p> <code>$ hexo help</code></p>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>首先在桌面上创建一个<code>blog</code>的文件夹，打开终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd desktop/blog	 # 进入刚创建的blog文件夹中</div><div class="line">$ hexo init &lt;&gt; # 把hexo 资源初始化到本地</div></pre></td></tr></table></figure>
<p>然后查看blog 文件夹，<img src="/images/hexo/hexo init blog.png" alt=""><br> 这时候可以本地测试下：<code>$ hexo s --debug</code>,然后请求 <code>http://localhost:4000/</code> 预览页面：<br> <img src="/images/hexo/hexo blog page.png" alt=""></p>
<h3 id="项目部署到github上"><a href="#项目部署到github上" class="headerlink" title="项目部署到github上"></a>项目部署到github上</h3><p>怎么样把项目部署到github上呢？？？这就需要我们修改 blog文件夹中的 _config.yml 文件 ，打开_config.yml 找到最下面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/XiaoZhangJian/xiaozhangjian.github.io.git   # 写上你自己申请仓库地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>配置好，我们还需要安装 <code>hexo-deployer-git</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git -S</div><div class="line">## 最后使用Hexo指令发布到Github</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>这样既可以直接访问，这样就可以直接访问 <a href="http://xiaozhangjian.github.io" target="_blank" rel="external">http://xiaozhangjian.github.io</a> 就可以访问了，我的github账号名称是xiaozhangjian,改成你的github账户名！</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>感觉自己默认的主题不好看，可以去 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo 主题</a> 挑选一种自己喜欢的，按照文档修改下即可！、</p>
<!--## 音乐-->
<!--<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=420400437&auto=1&height=66"></iframe>-->
<!-- ![福利图](/images/meizi/meizi1.jpg) -->
<!-- ## 前言 -->
<!-- 看看妹子解解乏，呼呼， -->
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
