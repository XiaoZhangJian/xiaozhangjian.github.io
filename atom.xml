<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Json`Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kimsblog.me/"/>
  <updated>2017-09-11T01:13:44.000Z</updated>
  <id>http://www.kimsblog.me/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anaconda使用总结</title>
    <link href="http://www.kimsblog.me/2017/09/10/2017-09-10-Anaconda%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.kimsblog.me/2017/09/10/2017-09-10-Anaconda入门使用/</id>
    <published>2017-09-10T15:34:17.000Z</published>
    <updated>2017-09-11T01:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序</strong></p>
<p><a href="https://www.continuum.io/why-anaconda" target="_blank" rel="external">Anaconda</a>是一个用于科学计算的Python发行版，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令<code>conda</code>来进行package和environment的管理，并且已经包含了Python和相关的配套工具。</p>
<a id="more"></a>
<h3 id="Anaconda-如何安装？"><a href="#Anaconda-如何安装？" class="headerlink" title="Anaconda 如何安装？"></a>Anaconda 如何安装？</h3><p>Anaconda的下载详见<a href="https://www.anaconda.com/download/" target="_blank" rel="external">官网下载地址</a> ，支持安装平台：Window、Mac、Linux</p>
<p>下载后直接按照说明安装即可。这里想提醒一点：尽量按照Anaconda默认的行为安装——不使用root权限，仅为个人安装，安装目录设置在个人主目录下（Windows就无所谓了）。这样的好处是，同一台机器上的不同用户完全可以安装、配置自己的Anaconda，不会互相影响。</p>
<p>对于Mac、Linux系统，Anaconda安装好后，实际上就是在主目录下多了个文件夹（<code>~/anaconda</code>）而已，Windows会写入注册表。安装时，安装程序会把bin目录加入PATH（Linux/Mac写入<code>~/.bashrc</code>由于作者使用的是<code>iTerm2</code>需要写入<code>~/.zshrc</code>，Windows添加到系统变量PATH），这些操作也完全可以自己完成。以Linux/Mac为例，安装完成后设置PATH的操作是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">open ~/.zshrc</div><div class="line">export CONDA_PATH=&quot;/Users/&lt;你的用户名&gt;/anaconda2/bin&quot;</div></pre></td></tr></table></figure>
<h3 id="conda-环境配置"><a href="#conda-环境配置" class="headerlink" title="conda 环境配置"></a>conda 环境配置</h3><p>Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是<code>root</code>，注意这个root不是超级管理员的意思）</p>
<p>假设我们需要安装Python 2.7，此时，我们需要做的操作如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 创建一个名为tensorflow的环境，指定Python版本是2.7（不用管是2.7.x，conda会为我们自动寻找2.7.x中的最新版本）</div><div class="line">conda create --name tensorflow python=2.7 anaconda</div><div class="line"></div><div class="line"># 安装好后，使用activate激活某个环境</div><div class="line">activate tensorflow # for Windows</div><div class="line">source activate tensorflow  # for Linux &amp; Mac</div><div class="line"># 激活后，会发现terminal输入的地方多了tensorflow的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</div><div class="line"></div><div class="line"># 此时，再次输入</div><div class="line">python --version</div><div class="line"># 可以得到`Python 2.7.12 :: Anaconda 4.2.0 (x86_64)`，即系统已经切换到了2.7的环境</div><div class="line"></div><div class="line"># 如果想返回默认的python 2.7环境，运行</div><div class="line">deactivate tensorflow # for Windows</div><div class="line">source deactivate tensorflow # for Linux &amp; Mac</div><div class="line"></div><div class="line"># 删除一个已有的环境</div><div class="line">conda remove --name tensorflow --all</div></pre></td></tr></table></figure>
<p>举个TensorFlow的栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 激活环境</div><div class="line">source activate tensorflow </div><div class="line"></div><div class="line"># 使用TensorFlow</div><div class="line">(tensorflow) ➜  ~ python</div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)</div><div class="line">&gt;&gt;&gt; sess = tf.Session()</div><div class="line">&gt;&gt;&gt; print(sess.run(hello))</div><div class="line">Hello, TensorFlow!</div><div class="line">&gt;&gt;&gt; exit()</div><div class="line"></div><div class="line"># 退出环境</div><div class="line">(tensorflow)$ source deactivate tensorflow</div></pre></td></tr></table></figure>
<p>用户安装的不同python环境都会被放在目录<code>~/anaconda/envs</code>下，可以在命令中运行<code>conda info -e</code>查看已安装的环境，当前被激活的环境会显示有一个星号或者括号。</p>
<h3 id="conda-包管理"><a href="#conda-包管理" class="headerlink" title="conda 包管理"></a>conda 包管理</h3><p>Conda的包管理就比较好理解了，这部分功能与<code>pip</code>类似。</p>
<p>例如，如果需要安装TensorFlow：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 安装tensorflow</div><div class="line">conda install scitensorflowpy</div><div class="line"># conda会从从远程搜索tensorflow的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</div><div class="line"></div><div class="line"># 查看已经安装的packages</div><div class="line">conda list</div><div class="line"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</div></pre></td></tr></table></figure>
<p>conda的一些常用操作如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 查看当前环境下已安装的包</div><div class="line">conda list</div><div class="line"></div><div class="line"># 查看某个指定环境的已安装包</div><div class="line">conda list -n python34</div><div class="line"></div><div class="line"># 查找package信息</div><div class="line">conda search numpy</div><div class="line"></div><div class="line"># 安装package</div><div class="line">conda install -n python34 numpy</div><div class="line"># 如果不用-n指定环境名称，则被安装在当前活跃环境</div><div class="line"># 也可以通过-c指定通过某个channel安装</div><div class="line"></div><div class="line"># 更新package</div><div class="line">conda update -n python34 numpy</div><div class="line"></div><div class="line"># 删除package</div><div class="line">conda remove -n python34 numpy</div></pre></td></tr></table></figure>
<p>前面已经提到，conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 更新conda，保持conda最新</div><div class="line">conda update conda</div><div class="line"></div><div class="line"># 更新anaconda</div><div class="line">conda update anaconda</div><div class="line"></div><div class="line"># 更新python</div><div class="line">conda update python</div><div class="line"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</div></pre></td></tr></table></figure>
<p>补充：如果创建新的python环境，比如3.4，运行<code>conda create -n python34 python=3.4</code>之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 在当前环境下安装anaconda包集合</div><div class="line">conda install anaconda</div><div class="line"></div><div class="line"># 结合创建环境的命令，以上操作可以合并为</div><div class="line">conda create -n python34 python=3.4 anaconda</div><div class="line"># 也可以不用全部安装，根据需求安装自己需要的package即可</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.continuum.io/why-anaconda&quot;&gt;Anaconda&lt;/a&gt;是一个用于科学计算的Python发行版，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令&lt;code&gt;conda&lt;/code&gt;来进行package和environment的管理，并且已经包含了Python和相关的配套工具。&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://www.kimsblog.me/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 个人笔记之混淆配置模板</title>
    <link href="http://www.kimsblog.me/2017/07/27/2017-07-27-Android%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.kimsblog.me/2017/07/27/2017-07-27-Android混淆配置记录/</id>
    <published>2017-07-27T14:49:30.000Z</published>
    <updated>2017-07-27T15:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中使用的混淆，进行一个笔记记录。</p>
<p>主要参考  <a href="http://www.jianshu.com/p/f3455ecaa56e" target="_blank" rel="external">5分钟搞定android混淆</a> </p>
<a id="more"></a>
<h3 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"># 基本指令区</div><div class="line">-optimizationpasses 5</div><div class="line">-dontusemixedcaseclassnames</div><div class="line">-dontskipnonpubliclibraryclasses</div><div class="line">-dontskipnonpubliclibraryclassmembers</div><div class="line">-dontpreverify</div><div class="line">-verbose</div><div class="line">-printmapping proguardMapping.txt</div><div class="line">-optimizations !code/simplification/cast,!field/*,!class/merging/*</div><div class="line">-keepattributes *Annotation*,InnerClasses</div><div class="line">-keepattributes Signature</div><div class="line">-keepattributes SourceFile,LineNumberTable</div><div class="line"></div><div class="line"># 默认配置</div><div class="line">-keep public class * extends android.app.Activity</div><div class="line">-keep public class * extends android.app.Application</div><div class="line">-keep public class * extends android.app.Service</div><div class="line">-keep public class * extends android.content.BroadcastReceiver</div><div class="line">-keep public class * extends android.content.ContentProvider</div><div class="line">-keep public class * extends android.app.backup.BackupAgentHelper</div><div class="line">-keep public class * extends android.preference.Preference</div><div class="line">-keep public class * extends android.view.View</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line">-keep class android.support.** &#123;*;&#125;</div><div class="line"></div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keepclassmembers class * extends android.app.Activity&#123;</div><div class="line">    public void *(android.view.View);</div><div class="line">&#125;</div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line">-keep public class * extends android.view.View&#123;</div><div class="line">    *** get*();</div><div class="line">    void set*(***);</div><div class="line">    public &lt;init&gt;(android.content.Context);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">-keepclasseswithmembers class * &#123;</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">-keep class * implements android.os.Parcelable &#123;</div><div class="line">  public static final android.os.Parcelable$Creator *;</div><div class="line">&#125;</div><div class="line">-keepclassmembers class * implements java.io.Serializable &#123;</div><div class="line">    static final long serialVersionUID;</div><div class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</div><div class="line">    private void writeObject(java.io.ObjectOutputStream);</div><div class="line">    private void readObject(java.io.ObjectInputStream);</div><div class="line">    java.lang.Object writeReplace();</div><div class="line">    java.lang.Object readResolve();</div><div class="line">&#125;</div><div class="line">-keep class **.R$* &#123;</div><div class="line"> *;</div><div class="line">&#125;</div><div class="line">-keepclassmembers class * &#123;</div><div class="line">    void *(**On*Event);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># 项目中混淆配置</div><div class="line"></div><div class="line">-keep class com.jason.demo.**&#123;*; &#125; // 混淆整个包下的类</div><div class="line">-keep class com.jason.demo.Test&#123;*; &#125; // 混淆单个类</div><div class="line">-keep class com.jason.demo.Test$Builder&#123;*; &#125;  // 混淆内部类</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># 第三方库配置</div><div class="line"></div><div class="line">## OkHttp</div><div class="line">-dontwarn okio.**</div><div class="line">-dontwarn javax.annotation.Nullable</div><div class="line">-dontwarn javax.annotation.ParametersAreNonnullByDefault</div><div class="line"></div><div class="line">## Glide</div><div class="line"></div><div class="line">-keep public class * implements com.bumptech.glide.module.GlideModule</div><div class="line">-keep public class * extends com.bumptech.glide.AppGlideModule</div><div class="line">-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</div><div class="line">  **[] $VALUES;</div><div class="line">  public *;</div><div class="line">&#125;</div><div class="line">-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</div><div class="line"></div><div class="line"></div><div class="line">## Retrofit</div><div class="line"></div><div class="line">-dontnote retrofit2.Platform</div><div class="line">-dontwarn retrofit2.Platform$Java8</div><div class="line">-keepattributes Signature</div><div class="line">-keepattributes Exceptions</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中使用的混淆，进行一个笔记记录。&lt;/p&gt;
&lt;p&gt;主要参考  &lt;a href=&quot;http://www.jianshu.com/p/f3455ecaa56e&quot;&gt;5分钟搞定android混淆&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.kimsblog.me/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>工作生涯之稀奇古怪的BUG</title>
    <link href="http://www.kimsblog.me/2017/07/21/2017-07-21-android-%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.kimsblog.me/2017/07/21/2017-07-21-android-工作中遇见的问题/</id>
    <published>2017-07-21T05:23:01.000Z</published>
    <updated>2017-12-01T05:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录一些，自己在工作/学习遇见的问题记录下解决方法（记忆力不太好）</p>
<a id="more"></a>
<h4 id="Android-Studio-打包JAR-的时候在build-intermediates-bundles-未生成release目录"><a href="#Android-Studio-打包JAR-的时候在build-intermediates-bundles-未生成release目录" class="headerlink" title="Android Studio 打包JAR 的时候在build/intermediates/bundles/未生成release目录"></a>Android Studio 打包JAR 的时候在<code>build/intermediates/bundles/</code>未生成release目录</h4><p>现象：<br><img src=".././images/problem/releasenot.png" alt="release不存在的图片"></p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">   </div><div class="line">    publishNonDefault true  // 添加上这句话重新Build就可以了</div><div class="line"></div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Android-Studio-使用Builder模式写实体类-进行混淆导致出现-父类-内部类-从而不能使用"><a href="#Android-Studio-使用Builder模式写实体类-进行混淆导致出现-父类-内部类-从而不能使用" class="headerlink" title="Android Studio 使用Builder模式写实体类 进行混淆导致出现 (父类$内部类)从而不能使用"></a>Android Studio 使用Builder模式写实体类 进行混淆导致出现 (父类$内部类)从而不能使用</h3><p>现象：</p>
<p><img src="http://i.imgur.com/9lPaosK.png" alt=""></p>
<p><img src="http://i.imgur.com/ebt0o3S.png" alt=""></p>
<p>解决方法：<code>更新时间 2017-07-27 18:47:13</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-keepattributes *Annotation*,InnerClasses #添加上 InnerClasses 即可解决</div></pre></td></tr></table></figure>
<h3 id="使用Anaconda-安装TensorFlow的失败"><a href="#使用Anaconda-安装TensorFlow的失败" class="headerlink" title="使用Anaconda 安装TensorFlow的失败"></a>使用Anaconda 安装TensorFlow的失败</h3><p>按照<a href="https://www.tensorflow.org/install/install_mac" target="_blank" rel="external">官方文档</a>安装出现的错误</p>
<p>现象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Exception:</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/basecommand.py&quot;, line 215, in main</div><div class="line">    status = self.run(options, args)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/commands/install.py&quot;, line 317, in run</div><div class="line">    prefix=options.prefix_path,</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/req/req_set.py&quot;, line 736, in install</div><div class="line">    requirement.uninstall(auto_confirm=True)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/req/req_install.py&quot;, line 742, in uninstall</div><div class="line">    paths_to_remove.remove(auto_confirm)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/req/req_uninstall.py&quot;, line 115, in remove</div><div class="line">    renames(path, new_path)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-8.1.2-py2.7.egg/pip/utils/__init__.py&quot;, line 267, in renames</div><div class="line">    shutil.move(old, new)</div><div class="line">  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py&quot;, line 299, in move</div><div class="line">    copytree(src, real_dst, symlinks=True)</div><div class="line">  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py&quot;, line 208, in copytree</div><div class="line">    raise Error, errors</div><div class="line">Error: [(&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py&apos;, &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py&apos;, &quot;[Errno 1] Operation not permitted: &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py&apos;&quot;), (&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc&apos;, &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc&apos;, &quot;[Errno 1] Operation not permitted: &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc&apos;&quot;), (&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py&apos;, &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py&apos;, &quot;[Errno 1] Operation not permitted: &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py&apos;&quot;), (&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc&apos;, &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc&apos;, &quot;[Errno 1] Operation not permitted: &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc&apos;&quot;), (&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib&apos;, &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib&apos;, &quot;[Errno 1] Operation not permitted: &apos;/tmp/pip-cjpz_s-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib&apos;&quot;)]</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<p>  直接把tensorflow-1.3.0-py2-none-any.whl先下载再安装的，国内老出现连接超时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install --upgrade --ignore-installed six tensorflow-1.3.0-py2-none-any.whl</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录一些，自己在工作/学习遇见的问题记录下解决方法（记忆力不太好）&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.kimsblog.me/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>关于获取android6.0的mac地址</title>
    <link href="http://www.kimsblog.me/2017/05/22/2017-05-22-android-%E8%8E%B7%E5%8F%96mac%E5%9C%B0%E5%9D%80/"/>
    <id>http://www.kimsblog.me/2017/05/22/2017-05-22-android-获取mac地址/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-07-27T02:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<p> 最近接触6.0,发现使用单纯的<code>wifiManager.getConnectionInfo().getMacAddress();</code>方法获取不到MAc地址。后来Google一下发现 Google对硬件信息的访问，其管控更加严格。SD 卡的读写，除了权限声明之外，还应该动态请求，否则就会被禁止。至于 MAC 网络地址的获取，相应的 API 返回的最新结果都是 <code>02:00:00:00:00:00</code> 这个固定值。可以参见 <a href="http://stackoverflow.com/questions/33159224/getting-mac-address-in-android-6-0" target="_blank" rel="external">Getting MAC address in Android 6.0</a>。<br> 按照官方解释，这是为了<code>更好的数据保护</code>，可以参见<a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-hardware-id" target="_blank" rel="external"> Android 6.0 变化</a>一文中 <code>Access to Hardware Identifier</code> 一节。</p>
<a id="more"></a>
<h2 id="获取-MAC-的传统方法："><a href="#获取-MAC-的传统方法：" class="headerlink" title="获取 MAC 的传统方法："></a>获取 MAC 的传统方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">final WifiManager wifiManager = (WifiManager) getApplication()</div><div class="line">				.getApplicationContext().getSystemService(Context.WIFI_SERVICE);</div><div class="line">final String wifiMACaddress = wifiManager.getConnectionInfo()</div><div class="line">				.getMacAddress();</div></pre></td></tr></table></figure>
<p>然而这种方法在<code>6.0</code>上并不好使,那怎么办呢?</p>
<p><img src="http://img.blog.csdn.net/20160512135937593" alt="这里写图片描述"></p>
<p>查询资料找到了相应的解决方法:<br>  使用Java获取设备网络设备信息的API——NetworkInterface.getNetworkInterfaces() ——仍然可以间接地获取到MAC地址。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 有兴趣的朋友可以看下NetworkInterface在Android FrameWork中怎么实现的</div><div class="line">	public static String macAddress() throws SocketException &#123;</div><div class="line">	        String address = null;</div><div class="line">	        // 把当前机器上的访问网络接口的存入 Enumeration集合中</div><div class="line">	        Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();</div><div class="line">	        while (interfaces.hasMoreElements()) &#123;</div><div class="line">	            NetworkInterface netWork = interfaces.nextElement();</div><div class="line">	            // 如果存在硬件地址并可以使用给定的当前权限访问，则返回该硬件地址（通常是 MAC）。 </div><div class="line">	            byte[] by = netWork.getHardwareAddress();</div><div class="line">	            if (by == null || by.length == 0) &#123;</div><div class="line">	                continue;</div><div class="line">	            &#125;</div><div class="line">	            StringBuilder builder = new StringBuilder();</div><div class="line">	            for (byte b : by) &#123;</div><div class="line">	                builder.append(String.format(&quot;%02X:&quot;, b));</div><div class="line">	            &#125;</div><div class="line">	            if (builder.length() &gt; 0) &#123;</div><div class="line">	            	builder.deleteCharAt(builder.length() - 1);</div><div class="line">	            &#125;</div><div class="line">	            String mac = builder.toString();</div><div class="line">	            Log.d(&quot;mac&quot;, &quot;interfaceName=&quot;+netWork.getName()+&quot;, mac=&quot;+mac);</div><div class="line">	            // 从路由器上在线设备的MAC地址列表，可以印证设备Wifi的 name 是 wlan0</div><div class="line">	            if (netWork.getName().equals(&quot;wlan0&quot;)) &#123;</div><div class="line">	                Log.d(&quot;mac&quot;, &quot; interfaceName =&quot;+netWork.getName()+&quot;, mac=&quot;+mac);</div><div class="line">	                address = mac;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        return address;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p><strong>运行的结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=wlan0, mac=8C:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=wlan0, mac=8C:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.528: D/mac(5132): interfaceName=p2p0, mac=8E:BE:BE:BD:EC:0E</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=dummy0, mac=42:35:AD:88:CE:D2</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=usbnet0, mac=52:D9:15:FA:64:1A</div><div class="line">05-09 18:39:31.538: D/mac(5132): interfaceName=rmnet0, mac=C6:76:E0:64:56:AC</div></pre></td></tr></table></figure>
<p></p>
<p>这样就可以正常的获取到6.0的mac地址了!希望能帮助大家</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近接触6.0,发现使用单纯的&lt;code&gt;wifiManager.getConnectionInfo().getMacAddress();&lt;/code&gt;方法获取不到MAc地址。后来Google一下发现 Google对硬件信息的访问，其管控更加严格。SD 卡的读写，除了权限声明之外，还应该动态请求，否则就会被禁止。至于 MAC 网络地址的获取，相应的 API 返回的最新结果都是 &lt;code&gt;02:00:00:00:00:00&lt;/code&gt; 这个固定值。可以参见 &lt;a href=&quot;http://stackoverflow.com/questions/33159224/getting-mac-address-in-android-6-0&quot;&gt;Getting MAC address in Android 6.0&lt;/a&gt;。&lt;br&gt; 按照官方解释，这是为了&lt;code&gt;更好的数据保护&lt;/code&gt;，可以参见&lt;a href=&quot;https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-hardware-id&quot;&gt; Android 6.0 变化&lt;/a&gt;一文中 &lt;code&gt;Access to Hardware Identifier&lt;/code&gt; 一节。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.kimsblog.me/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 快速搭建个人博客</title>
    <link href="http://www.kimsblog.me/2017/04/21/2017-04-21-hexo-hello%20world/"/>
    <id>http://www.kimsblog.me/2017/04/21/2017-04-21-hexo-hello world/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-07-27T02:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="description" content="Hexo + GitHub 快速搭建自己的博客">

<p>刚开始接触Hexo时候遇见各种坑，各种找资料，终于解决了！第一次写博客，因为搭建这个博客网站就是为了记录下自己学习过的东西，生怕忘了就尴尬了！可能写的不太好，我会努力的！<br>我的博客地址：<a href="http://www.kimsblog.me">kim’s blog</a> 有兴趣的朋友可以看下</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Github-账号"><a href="#Github-账号" class="headerlink" title="Github 账号"></a>Github 账号</h3><h4 id="Github是什么-各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github-是什么是可耻的！"><a href="#Github是什么-各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github-是什么是可耻的！" class="headerlink" title="Github是什么?各位老司机不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github 是什么是可耻的！"></a>Github是什么?各位<code>老司机</code>不用我多说你们也懂吧，身为一个程序猿（媛）不知道Github 是什么是可耻的！</h4><h4 id="创建项目存放博客"><a href="#创建项目存放博客" class="headerlink" title="创建项目存放博客"></a>创建项目存放博客</h4><ul>
<li>登录Github账号，进入主页面，看右上角<img src="/images/github/github new project1.png" alt="Github new project1"></li>
<li>仓库名格式: <code>username.github.io</code> username 代表你的github用户名保持一致，最后点击 <input type="button" value="Create repository "> 按钮<br><br>  <img src="/images/github/github new project2.png" alt="Github new project2"></li>
<li>进入这个页面创建成功！<br><br>  <img src="/images/github/github new project3.png" alt="Github new project3"></li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git-官网下载"><a href="#使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git-官网下载" class="headerlink" title="使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去Git 官网下载"></a>使用git主要是把hexo的代码上传到githu上，xcode自带git，如果没安装就去<a href="https://git-scm.com/download" target="_blank" rel="external"><code>Git 官网</code></a>下载</h4><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="Git-官网下载安装包"><a href="#Git-官网下载安装包" class="headerlink" title="Git 官网下载安装包"></a><a href="https://git-scm.com/download" target="_blank" rel="external">Git 官网</a>下载安装包<img src="/images/git/git page download.png" alt="git download page"></h5><h5 id="下载好，双击打开"><a href="#下载好，双击打开" class="headerlink" title="下载好，双击打开"></a>下载好，双击打开</h5><h5 id="检查SSH-Key，查看是否已经存在key，请把已有key备份"><a href="#检查SSH-Key，查看是否已经存在key，请把已有key备份" class="headerlink" title="检查SSH Key，查看是否已经存在key，请把已有key备份"></a>检查SSH Key，查看是否已经存在key，请把已有key备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh</div><div class="line">$ ls</div></pre></td></tr></table></figure>
<h5 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</div></pre></td></tr></table></figure>
<h5 id="把SSH-Key-添加到Github"><a href="#把SSH-Key-添加到Github" class="headerlink" title="把SSH Key 添加到Github"></a>把SSH Key 添加到Github</h5><ul>
<li>登录github账号,点击头像旁小三角, 选择 Settings<img src="/images/github/github settings1.png" alt="Github setting"></li>
<li>进入设置页面，左侧选择 <code>SSH and GPG keys</code> 会看到这个 <img src="/images/github/github new ssh key1.png" alt="Github new ssh key page"><br> 点击 <code>New SSH Key</code>出现 <img src="/images/github/github new ssh key2.png" alt="Github new ssh key page2"> title 随意填写，key 输入 <code>id_rsa.pub</code>文件中内容,然后保存</li>
</ul>
<h5 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh git@github.com</div></pre></td></tr></table></figure>
<h5 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h5><p><code>$ git config --global user.name &quot;xxx&quot;</code><br><code>$ git config --glbal user.email &quot;xxxx@xxx.com&quot;</code></p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="使用node-主要用来生成静态页面，Node-官网"><a href="#使用node-主要用来生成静态页面，Node-官网" class="headerlink" title="使用node 主要用来生成静态页面，Node 官网"></a>使用node 主要用来生成静态页面，<a href="https://nodejs.org/en/" target="_blank" rel="external"><code>Node 官网</code></a></h4><h4 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="Node-官网下载安装包"><a href="#Node-官网下载安装包" class="headerlink" title="Node 官网下载安装包"></a><a href="https://nodejs.org/en/" target="_blank" rel="external">Node 官网</a>下载安装包<img src="/images/node/node page download.png" alt=""></h5><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><img src="/images/node/node install.png" alt="node install"><br> 安装 Pkg 文件，一路 Next 就完成安装！</p>
<h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><h5 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h5><p> <code>$ node -v</code><br>显示版本证明安装成功！<br><img src="/images/node/node check.png" alt="node check"> </p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="环境配置-2"><a href="#环境配置-2" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="确定Git-和-Node-都安装好，才能安装-hexo"><a href="#确定Git-和-Node-都安装好，才能安装-hexo" class="headerlink" title="确定Git 和 Node 都安装好，才能安装 hexo"></a>确定Git 和 Node 都安装好，才能安装 hexo</h5><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><p><code>$ npm install hexo-cli -g</code></p>
<h5 id="查看hexo命令："><a href="#查看hexo命令：" class="headerlink" title="查看hexo命令："></a>查看hexo命令：</h5><p> <code>$ hexo help</code></p>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>首先在桌面上创建一个<code>blog</code>的文件夹，打开终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd desktop/blog	 # 进入刚创建的blog文件夹中</div><div class="line">$ hexo init &lt;&gt; # 把hexo 资源初始化到本地</div></pre></td></tr></table></figure>
<p>然后查看blog 文件夹，<img src="/images/hexo/hexo init blog.png" alt=""><br> 这时候可以本地测试下：<code>$ hexo s --debug</code>,然后请求 <code>http://localhost:4000/</code> 预览页面：<br> <img src="/images/hexo/hexo blog page.png" alt=""></p>
<h3 id="项目部署到github上"><a href="#项目部署到github上" class="headerlink" title="项目部署到github上"></a>项目部署到github上</h3><p>怎么样把项目部署到github上呢？？？这就需要我们修改 blog文件夹中的 _config.yml 文件 ，打开_config.yml 找到最下面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/XiaoZhangJian/xiaozhangjian.github.io.git   # 写上你自己申请仓库地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>配置好，我们还需要安装 <code>hexo-deployer-git</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git -S</div><div class="line">## 最后使用Hexo指令发布到Github</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>这样既可以直接访问，这样就可以直接访问 <a href="http://xiaozhangjian.github.io" target="_blank" rel="external">http://xiaozhangjian.github.io</a> 就可以访问了，我的github账号名称是xiaozhangjian,改成你的github账户名！</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>感觉自己默认的主题不好看，可以去 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo 主题</a> 挑选一种自己喜欢的，按照文档修改下即可！、</p>
<!--## 音乐-->
<!--<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=420400437&auto=1&height=66"></iframe>-->
<!-- ![福利图](/images/meizi/meizi1.jpg) -->
<!-- ## 前言 -->
<!-- 看看妹子解解乏，呼呼， -->
]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;description&quot; content=&quot;Hexo + GitHub 快速搭建自己的博客&quot; /&gt;

&lt;p&gt;刚开始接触Hexo时候遇见各种坑，各种找资料，终于解决了！第一次写博客，因为搭建这个博客网站就是为了记录下自己学习过的东西，生怕忘了就尴尬了！可能写的不太好，我会努力的！&lt;br&gt;我的博客地址：&lt;a href=&quot;http://www.kimsblog.me&quot;&gt;kim’s blog&lt;/a&gt; 有兴趣的朋友可以看下&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.kimsblog.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客搭建" scheme="http://www.kimsblog.me/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
